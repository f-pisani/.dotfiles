# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

git_current_head () {
    git symbolic-ref --short HEAD 2>/dev/null || git rev-parse --short HEAD
}

git_dirty_mark () {
    [[ -n $(git status -s | head -c 1) ]] && echo '*'
}


git_special_indicator() {
    local dir="$(git rev-parse --git-dir 2>/dev/null)"
    if [ ! -n "${dir}" ]; then
        exit 0
    fi

    local special_indicator=""
    if [ -d "${dir}/rebase-apply" ]; then
        if [ -f "${dir}/rebase-apply/rebasing" ]; then
            special_indicator="|REBASE"
        elif [ -f "${dir}/rebase-apply/applying" ]; then
            special_indicator="|AM"
        else
            special_indicator="|AM/REBASE"
        fi
    elif [ -f "${dir}/rebase-merge/interactive" ]; then
        special_indicator="|REBASE-i"
    elif [ -d "${dir}/rebase-merge" ]; then
        special_indicator="|REBASE-m"
    elif [ -f "${dir}/MERGE_HEAD" ]; then
        special_indicator="|MERGING"
    elif [ -f "${dir}/BISECT_LOG" ]; then
        special_indicator="|BISECTING"
    elif [ -f "${dir}/CHERRY_PICK_HEAD" ]; then
        special_indicator="|CHERRY-PICKING"
    fi

    echo "${special_indicator}"
}

show_git_prompt () {
    git branch 2>/dev/null 1>&2 && echo -e "-(\e[34m$(git_current_head)$(git_dirty_mark)$(git_special_indicator)\e[31m)"
}

git_state=''
if [[ -n $(type -t git) ]] ; then
    git_state="\$(show_git_prompt)"
fi

if [ "$color_prompt" = yes ]; then
    PS1="
\[\e[31m\]┌───[\e[0m\]\t\[\e[31m\]]-[\[\e[32m\]\u\[\e[31m\]@\[\e[33m\]\H\[\e[31m\]]-[${debian_chroot:+($debian_chroot)}\[\e[0m\]\w\[\e[31m\]]$git_state
\[\e[31m\]└─\$\[\e[0m\] "
else
    PS1="
┌───[\t]-[${debian_chroot:+($debian_chroot)}\u@\H]-[\w]
└─\$ "
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Auto-start gpg-agent
if [[ -n $(type -t gpgconf) ]] ; then
    export GPG_TTY="$(tty)"
    export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
    gpgconf --launch gpg-agent
fi
